export const encrypt = (text) => window.crypto.subtle
    .generateKey({
    name: "AES-GCM",
    length: 256,
}, true, ["encrypt", "decrypt"])
    .then(async (key) => {
    const iv = window.crypto.getRandomValues(new Uint8Array(12));
    const cipher = await window.crypto.subtle.encrypt({
        name: "AES-GCM",
        iv,
    }, key, new TextEncoder().encode(text));
    return [key, iv, cipher];
});
export const decrypt = (key, iv, cipher) => window.crypto.subtle
    .decrypt({
    name: "AES-GCM",
    iv
}, key, cipher)
    .then(arrayBuffer => new TextDecoder("UTF-8").decode(arrayBuffer));
export const arrayBufferToHexString = (arrayBuffer) => {
    const uint8Array = new Uint8Array(arrayBuffer);
    const string = Array.from(uint8Array)
        .map(byte => byte.toString(16).padStart(2, "0"))
        .join("");
    return string;
};
export const hexStringToArrayBuffer = (string) => {
    const matchArray = string.match(/[\da-f]{2}/gi);
    if (!matchArray)
        return new ArrayBuffer(0);
    const uint8Array = new Uint8Array(matchArray.map(function (h) {
        return parseInt(h, 16);
    }));
    return uint8Array.buffer;
};
export const getCookie = (name) => {
    let start = document.cookie.indexOf(`${name}=`);
    if (start < 0)
        return "";
    start += (name.length + 1);
    const end = document.cookie.indexOf(";", start);
    const value = document.cookie.substring(start, end >= 0 ? end : undefined);
    return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1vYXV0aDItb2lkYy9zcmMvdXRpbHMvZW5jcnlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FDbkIsSUFBWSxFQUNrQyxFQUFFLENBQ2hELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTTtLQUNmLFdBQVcsQ0FDUjtJQUNJLElBQUksRUFBRSxTQUFTO0lBQ2YsTUFBTSxFQUFFLEdBQUc7Q0FDZCxFQUNELElBQUksRUFDSixDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FDekI7S0FDQSxJQUFJLENBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxFQUFFO0lBQ2QsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3RCxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FDN0M7UUFDSSxJQUFJLEVBQUUsU0FBUztRQUNmLEVBQUU7S0FDTCxFQUNELEdBQUcsRUFDSCxJQUFJLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FDakMsQ0FBQztJQUNGLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLENBQUMsQ0FBQyxDQUFDO0FBRVgsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQ25CLEdBQWMsRUFDZCxFQUFlLEVBQ2YsTUFBbUIsRUFDckIsRUFBRSxDQUNBLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTTtLQUNmLE9BQU8sQ0FDSjtJQUNJLElBQUksRUFBRSxTQUFTO0lBQ2YsRUFBRTtDQUNMLEVBQ0QsR0FBRyxFQUNILE1BQU0sQ0FDVDtLQUNBLElBQUksQ0FBRSxXQUFXLENBQUMsRUFBRSxDQUFDLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBRTVFLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQUMsV0FBd0IsRUFBRSxFQUFFO0lBQy9ELE1BQU0sVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1NBQ2hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUMvQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFZCxPQUFPLE1BQU0sQ0FBQTtBQUNqQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLE1BQWMsRUFBRSxFQUFFO0lBQ3JELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFaEQsSUFBSSxDQUFDLFVBQVU7UUFDWCxPQUFPLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTlCLE1BQU0sVUFBVSxHQUFHLElBQUksVUFBVSxDQUM3QixVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUN0QixPQUFPLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUVGLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQTtBQUM1QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRTtJQUN0QyxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7SUFFaEQsSUFBSSxLQUFLLEdBQUcsQ0FBQztRQUNULE9BQU8sRUFBRSxDQUFDO0lBRWQsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzQixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEQsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQ25DLEtBQUssRUFDTCxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDN0IsQ0FBQztJQUVGLE9BQU8sS0FBSyxDQUFBO0FBQ2hCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBlbmNyeXB0ID0gKFxuICAgIHRleHQ6IHN0cmluZ1xuKTogUHJvbWlzZTxbQ3J5cHRvS2V5LCBBcnJheUJ1ZmZlciwgQXJyYXlCdWZmZXJdPiA9PlxuICAgIHdpbmRvdy5jcnlwdG8uc3VidGxlXG4gICAgICAgIC5nZW5lcmF0ZUtleShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFFUy1HQ01cIixcbiAgICAgICAgICAgICAgICBsZW5ndGg6IDI1NixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgW1wiZW5jcnlwdFwiLCBcImRlY3J5cHRcIl1cbiAgICAgICAgKVxuICAgICAgICAudGhlbihhc3luYyBrZXkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXYgPSB3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgxMikpO1xuICAgICAgICAgICAgY29uc3QgY2lwaGVyID0gYXdhaXQgd2luZG93LmNyeXB0by5zdWJ0bGUuZW5jcnlwdChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQUVTLUdDTVwiLFxuICAgICAgICAgICAgICAgICAgICBpdixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUodGV4dClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gW2tleSwgaXYsIGNpcGhlcl07XG4gICAgICAgIH0pO1xuXG5leHBvcnQgY29uc3QgZGVjcnlwdCA9IChcbiAgICBrZXk6IENyeXB0b0tleSxcbiAgICBpdjogQXJyYXlCdWZmZXIsXG4gICAgY2lwaGVyOiBBcnJheUJ1ZmZlclxuKSA9PlxuICAgIHdpbmRvdy5jcnlwdG8uc3VidGxlXG4gICAgICAgIC5kZWNyeXB0KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQUVTLUdDTVwiLFxuICAgICAgICAgICAgICAgIGl2XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgY2lwaGVyXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4gKGFycmF5QnVmZmVyID0+IG5ldyBUZXh0RGVjb2RlcihcIlVURi04XCIpLmRlY29kZShhcnJheUJ1ZmZlcikpO1xuXG5leHBvcnQgY29uc3QgYXJyYXlCdWZmZXJUb0hleFN0cmluZyA9IChhcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXIpID0+IHtcbiAgICBjb25zdCB1aW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xuICAgIGNvbnN0IHN0cmluZyA9IEFycmF5LmZyb20odWludDhBcnJheSlcbiAgICAgICAgLm1hcChieXRlID0+IGJ5dGUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSlcbiAgICAgICAgLmpvaW4oXCJcIik7XG5cbiAgICByZXR1cm4gc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBoZXhTdHJpbmdUb0FycmF5QnVmZmVyID0gKHN0cmluZzogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgbWF0Y2hBcnJheSA9IHN0cmluZy5tYXRjaCgvW1xcZGEtZl17Mn0vZ2kpO1xuXG4gICAgaWYgKCFtYXRjaEFycmF5KVxuICAgICAgICByZXR1cm4gbmV3IEFycmF5QnVmZmVyKDApO1xuXG4gICAgY29uc3QgdWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KFxuICAgICAgICBtYXRjaEFycmF5Lm1hcChmdW5jdGlvbiAoaCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGgsIDE2KTtcbiAgICAgICAgfSlcbiAgICApO1xuXG4gICAgcmV0dXJuIHVpbnQ4QXJyYXkuYnVmZmVyXG59XG5cbmV4cG9ydCBjb25zdCBnZXRDb29raWUgPSAobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgbGV0IHN0YXJ0ID0gZG9jdW1lbnQuY29va2llLmluZGV4T2YoYCR7bmFtZX09YCk7XG5cbiAgICBpZiAoc3RhcnQgPCAwKVxuICAgICAgICByZXR1cm4gXCJcIjtcblxuICAgIHN0YXJ0ICs9IChuYW1lLmxlbmd0aCArIDEpO1xuICAgIGNvbnN0IGVuZCA9IGRvY3VtZW50LmNvb2tpZS5pbmRleE9mKFwiO1wiLCBzdGFydCk7XG4gICAgY29uc3QgdmFsdWUgPSBkb2N1bWVudC5jb29raWUuc3Vic3RyaW5nKFxuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kID49IDAgPyBlbmQgOiB1bmRlZmluZWRcbiAgICApO1xuXG4gICAgcmV0dXJuIHZhbHVlXG59XG4iXX0=