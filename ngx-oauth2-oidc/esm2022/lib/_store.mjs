/**
 * Sets/removes an oauth2 session storage item
 *
 * @param name Name of the session storage key. Internally is prefixed by "oauth2_"
 * @param value New value. If null or empty string, the item is removed.
 */
export const setStore = (name, value = null) => {
    const sto = sessionStorage;
    const val = JSON.parse(JSON.stringify(value));
    if (name == "config" && !!value) {
        delete val?.parameters?.id_token;
        delete val?.parameters?.access_token;
        delete val?.parameters?.refresh_token;
        delete val?.parameters?.code;
        delete val?.parameters?.client_secret;
        delete val?.parameters?.code_challenge;
    }
    name = `oauth2_${name}`;
    if (val == null || val === "")
        sto.removeItem(name);
    else
        sto.setItem(name, JSON.stringify(val));
};
/**
 * Gets an oauth2 session storage item
 *
 * @param name Name of the session storage key. Internally is prefixed by "oauth2_"
 * @returns The stored value
 */
export const getStore = (name) => {
    const sto = sessionStorage;
    name = `oauth2_${name}`;
    return sto.getItem(name);
};
/**
 * Gets an oauth2 session storage item as an object type
 *
 * @param name Name of the session storage key. Internally is prefixed by "oauth2_"
 * @returns The stored value
 */
export const getStoreObject = (name) => {
    const str = getStore(name);
    return str ? JSON.parse(str) : null;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3N0b3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW9hdXRoMi1vaWRjL3NyYy9saWIvX3N0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQ3BCLElBQVksRUFDWixRQUFpQixJQUFJLEVBQ3ZCLEVBQUU7SUFDQSxNQUFNLEdBQUcsR0FBRyxjQUFjLENBQUM7SUFFM0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFOUMsSUFBSSxJQUFJLElBQUksUUFBUSxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixPQUFRLEdBQXFCLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQztRQUNwRCxPQUFRLEdBQXFCLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQztRQUN4RCxPQUFRLEdBQXFCLEVBQUUsVUFBVSxFQUFFLGFBQWEsQ0FBQztRQUN6RCxPQUFRLEdBQXFCLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQztRQUNoRCxPQUFRLEdBQXFCLEVBQUUsVUFBVSxFQUFFLGFBQWEsQ0FBQztRQUN6RCxPQUFRLEdBQXFCLEVBQUUsVUFBVSxFQUFFLGNBQWMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsSUFBSSxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7SUFDeEIsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsS0FBSyxFQUFFO1FBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7UUFDL0MsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQy9DLENBQUMsQ0FBQztBQUVGOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQ3BCLElBQVksRUFDQyxFQUFFO0lBQ2YsTUFBTSxHQUFHLEdBQUcsY0FBYyxDQUFDO0lBRTNCLElBQUksR0FBRyxVQUFVLElBQUksRUFBRSxDQUFDO0lBQ3hCLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixDQUFDLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUMxQixJQUFZLEVBQ0MsRUFBRTtJQUNmLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUzQixPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3BELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElPQXV0aDJDb25maWcgfSBmcm9tIFwiLi4vZG9tYWluXCI7XG5cbi8qKlxuICogU2V0cy9yZW1vdmVzIGFuIG9hdXRoMiBzZXNzaW9uIHN0b3JhZ2UgaXRlbVxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIHNlc3Npb24gc3RvcmFnZSBrZXkuIEludGVybmFsbHkgaXMgcHJlZml4ZWQgYnkgXCJvYXV0aDJfXCJcbiAqIEBwYXJhbSB2YWx1ZSBOZXcgdmFsdWUuIElmIG51bGwgb3IgZW1wdHkgc3RyaW5nLCB0aGUgaXRlbSBpcyByZW1vdmVkLlxuICovXG5leHBvcnQgY29uc3Qgc2V0U3RvcmUgPSAoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHZhbHVlOiB1bmtub3duID0gbnVsbFxuKSA9PiB7XG4gICAgY29uc3Qgc3RvID0gc2Vzc2lvblN0b3JhZ2U7XG5cbiAgICBjb25zdCB2YWwgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG5cbiAgICBpZiAobmFtZSA9PSBcImNvbmZpZ1wiICYmICEhdmFsdWUpIHtcbiAgICAgICAgZGVsZXRlICh2YWwgYXMgSU9BdXRoMkNvbmZpZyk/LnBhcmFtZXRlcnM/LmlkX3Rva2VuO1xuICAgICAgICBkZWxldGUgKHZhbCBhcyBJT0F1dGgyQ29uZmlnKT8ucGFyYW1ldGVycz8uYWNjZXNzX3Rva2VuO1xuICAgICAgICBkZWxldGUgKHZhbCBhcyBJT0F1dGgyQ29uZmlnKT8ucGFyYW1ldGVycz8ucmVmcmVzaF90b2tlbjtcbiAgICAgICAgZGVsZXRlICh2YWwgYXMgSU9BdXRoMkNvbmZpZyk/LnBhcmFtZXRlcnM/LmNvZGU7XG4gICAgICAgIGRlbGV0ZSAodmFsIGFzIElPQXV0aDJDb25maWcpPy5wYXJhbWV0ZXJzPy5jbGllbnRfc2VjcmV0O1xuICAgICAgICBkZWxldGUgKHZhbCBhcyBJT0F1dGgyQ29uZmlnKT8ucGFyYW1ldGVycz8uY29kZV9jaGFsbGVuZ2U7XG4gICAgfVxuXG4gICAgbmFtZSA9IGBvYXV0aDJfJHtuYW1lfWA7XG4gICAgaWYgKHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gXCJcIikgc3RvLnJlbW92ZUl0ZW0obmFtZSk7XG4gICAgZWxzZSBzdG8uc2V0SXRlbShuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWwpKVxufTtcblxuLyoqXG4gKiBHZXRzIGFuIG9hdXRoMiBzZXNzaW9uIHN0b3JhZ2UgaXRlbVxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIHNlc3Npb24gc3RvcmFnZSBrZXkuIEludGVybmFsbHkgaXMgcHJlZml4ZWQgYnkgXCJvYXV0aDJfXCJcbiAqIEByZXR1cm5zIFRoZSBzdG9yZWQgdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFN0b3JlID0gKFxuICAgIG5hbWU6IHN0cmluZ1xuKTogc3RyaW5nIHwgbnVsbCA9PiB7XG4gICAgY29uc3Qgc3RvID0gc2Vzc2lvblN0b3JhZ2U7XG5cbiAgICBuYW1lID0gYG9hdXRoMl8ke25hbWV9YDtcbiAgICByZXR1cm4gc3RvLmdldEl0ZW0obmFtZSk7XG59O1xuXG4vKipcbiAqIEdldHMgYW4gb2F1dGgyIHNlc3Npb24gc3RvcmFnZSBpdGVtIGFzIGFuIG9iamVjdCB0eXBlXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgc2Vzc2lvbiBzdG9yYWdlIGtleS4gSW50ZXJuYWxseSBpcyBwcmVmaXhlZCBieSBcIm9hdXRoMl9cIlxuICogQHJldHVybnMgVGhlIHN0b3JlZCB2YWx1ZVxuICovXG5leHBvcnQgY29uc3QgZ2V0U3RvcmVPYmplY3QgPSAoXG4gICAgbmFtZTogc3RyaW5nXG4pOiBvYmplY3QgfCBudWxsID0+IHtcbiAgICBjb25zdCBzdHIgPSBnZXRTdG9yZShuYW1lKTtcblxuICAgIHJldHVybiBzdHIgPyAoSlNPTi5wYXJzZShzdHIpIGFzIG9iamVjdCkgOiBudWxsO1xufTtcbiJdfQ==