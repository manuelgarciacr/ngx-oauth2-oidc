import { getType, parameterNames } from "../domain";
import { toLowerCaseProperties } from "../utils";
import { isJSON } from "../utils/isJason";
export const _setParameters = (ioauth2Parameters = {}, functionName = "") => {
    if (!ioauth2Parameters || Object.entries(ioauth2Parameters).length == 0)
        return {};
    const parameters = toLowerCaseProperties(ioauth2Parameters); // Internal configuration parameters object
    // Parameter names are not unexpected (are warnongs)
    const parmKeys = Object.keys(parameters);
    const parmErrors = parmKeys.filter(key => !parameterNames.all.includes(key));
    if (parmErrors.length)
        console.error(`WARNING: Unexpected parameters: ${parmErrors.join(", ")}.`, {
            message: `Custom parameters must be included inside the enpoint configuration options.`,
            cause: `oauth2 ${functionName}`,
        });
    // Parameters types
    for (const parm in parameters) {
        const key = parm;
        const value = parameters[key];
        const type = getType(key);
        if (value === undefined || value === null) {
            delete parameters[key];
            continue;
        }
        if (type == "array" && typeof value === "string")
            parameters[key] = [value];
        if (type == "array" && typeof value === "number")
            parameters[key] = [value];
        if (type == "array" && typeof value === "bigint")
            parameters[key] = [value];
        if (type == "array" && !Array.isArray(parameters[key])) {
            throw new Error(`The parameter "${key}" must be an array`, {
                cause: `oauth2 ${functionName}`,
            });
        }
        if (type == "json" && !isJSON(value)) {
            throw new Error(`The parameter "${key}" must be of type JSON`, {
                cause: `oauth2 ${functionName}`,
            });
        }
        if (type != "array" &&
            type != "json" &&
            type != "undefined" &&
            type != typeof value) {
            throw new Error(`The parameter "${key}" must be of type ${type}`, {
                cause: `oauth2 ${functionName}`,
            });
        }
    }
    return parameters;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NldFBhcmFtZXRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtb2F1dGgyLW9pZGMvc3JjL2xpYi9fc2V0UGFyYW1ldGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXdCLE9BQU8sRUFBcUIsY0FBYyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzdGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFMUMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsb0JBQTBDLEVBQUUsRUFBRSxZQUFZLEdBQUcsRUFBRSxFQUFFLEVBQUU7SUFFOUYsSUFBSSxDQUFDLGlCQUFpQixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQztRQUNuRSxPQUFPLEVBQUUsQ0FBQztJQUVkLE1BQU0sVUFBVSxHQUFHLHFCQUFxQixDQUFDLGlCQUFpQixDQUFFLENBQUMsQ0FBQywyQ0FBMkM7SUFFekcsb0RBQW9EO0lBRXBELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekMsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FDOUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUMzQyxDQUFDO0lBRUYsSUFBSSxVQUFVLENBQUMsTUFBTTtRQUNqQixPQUFPLENBQUMsS0FBSyxDQUNULG1DQUFtQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQzNEO1lBQ0ksT0FBTyxFQUFFLDhFQUE4RTtZQUN2RixLQUFLLEVBQUUsVUFBVSxZQUFZLEVBQUU7U0FDbEMsQ0FDSixDQUFDO0lBRU4sbUJBQW1CO0lBRW5CLEtBQUssTUFBTSxJQUFJLElBQUksVUFBVSxFQUFFLENBQUM7UUFDNUIsTUFBTSxHQUFHLEdBQUcsSUFBK0IsQ0FBQztRQUM1QyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTFCLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDeEMsT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkIsU0FBUTtRQUNaLENBQUM7UUFFRCxJQUFJLElBQUksSUFBSSxPQUFPLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUTtZQUMzQyxVQUFVLENBQUMsR0FBRyxDQUFjLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUU1QyxJQUFJLElBQUksSUFBSSxPQUFPLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUTtZQUMzQyxVQUFVLENBQUMsR0FBRyxDQUF5QixHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdkQsSUFBSSxJQUFJLElBQUksT0FBTyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVE7WUFDM0MsVUFBVSxDQUFDLEdBQUcsQ0FBeUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXZELElBQUksSUFBSSxJQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNyRCxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixHQUFHLG9CQUFvQixFQUFFO2dCQUN2RCxLQUFLLEVBQUUsVUFBVSxZQUFZLEVBQUU7YUFDbEMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUVELElBQUksSUFBSSxJQUFJLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLEdBQUcsd0JBQXdCLEVBQUU7Z0JBQzNELEtBQUssRUFBRSxVQUFVLFlBQVksRUFBRTthQUNsQyxDQUFDLENBQUM7UUFDUCxDQUFDO1FBRUQsSUFDSSxJQUFJLElBQUksT0FBTztZQUNmLElBQUksSUFBSSxNQUFNO1lBQ2QsSUFBSSxJQUFJLFdBQVc7WUFDbkIsSUFBSSxJQUFJLE9BQU8sS0FBSyxFQUN0QixDQUFDO1lBQ0MsTUFBTSxJQUFJLEtBQUssQ0FDWCxrQkFBa0IsR0FBRyxxQkFBcUIsSUFBSSxFQUFFLEVBQ2hEO2dCQUNJLEtBQUssRUFBRSxVQUFVLFlBQVksRUFBRTthQUNsQyxDQUNKLENBQUM7UUFDTixDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU8sVUFBVSxDQUFBO0FBQ3JCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGN1c3RvbVBhcmFtZXRlcnNUeXBlLCBnZXRUeXBlLCBJT0F1dGgyUGFyYW1ldGVycywgcGFyYW1ldGVyTmFtZXMgfSBmcm9tIFwiLi4vZG9tYWluXCI7XG5pbXBvcnQgeyB0b0xvd2VyQ2FzZVByb3BlcnRpZXMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IGlzSlNPTiB9IGZyb20gXCIuLi91dGlscy9pc0phc29uXCI7XG5cbmV4cG9ydCBjb25zdCBfc2V0UGFyYW1ldGVycyA9IChpb2F1dGgyUGFyYW1ldGVycyA9IDxjdXN0b21QYXJhbWV0ZXJzVHlwZT57fSwgZnVuY3Rpb25OYW1lID0gXCJcIikgPT4ge1xuXG4gICAgaWYgKCFpb2F1dGgyUGFyYW1ldGVycyB8fCBPYmplY3QuZW50cmllcyhpb2F1dGgyUGFyYW1ldGVycykubGVuZ3RoID09IDApXG4gICAgICAgIHJldHVybiB7fTtcblxuICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB0b0xvd2VyQ2FzZVByb3BlcnRpZXMoaW9hdXRoMlBhcmFtZXRlcnMpITsgLy8gSW50ZXJuYWwgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzIG9iamVjdFxuXG4gICAgLy8gUGFyYW1ldGVyIG5hbWVzIGFyZSBub3QgdW5leHBlY3RlZCAoYXJlIHdhcm5vbmdzKVxuXG4gICAgY29uc3QgcGFybUtleXMgPSBPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKTtcbiAgICBjb25zdCBwYXJtRXJyb3JzID0gcGFybUtleXMuZmlsdGVyKFxuICAgICAgICBrZXkgPT4gIXBhcmFtZXRlck5hbWVzLmFsbC5pbmNsdWRlcyhrZXkpXG4gICAgKTtcblxuICAgIGlmIChwYXJtRXJyb3JzLmxlbmd0aClcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBXQVJOSU5HOiBVbmV4cGVjdGVkIHBhcmFtZXRlcnM6ICR7cGFybUVycm9ycy5qb2luKFwiLCBcIil9LmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogYEN1c3RvbSBwYXJhbWV0ZXJzIG11c3QgYmUgaW5jbHVkZWQgaW5zaWRlIHRoZSBlbnBvaW50IGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5gLFxuICAgICAgICAgICAgICAgIGNhdXNlOiBgb2F1dGgyICR7ZnVuY3Rpb25OYW1lfWAsXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAvLyBQYXJhbWV0ZXJzIHR5cGVzXG5cbiAgICBmb3IgKGNvbnN0IHBhcm0gaW4gcGFyYW1ldGVycykge1xuICAgICAgICBjb25zdCBrZXkgPSBwYXJtIGFzIGtleW9mIElPQXV0aDJQYXJhbWV0ZXJzO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtZXRlcnNba2V5XTtcbiAgICAgICAgY29uc3QgdHlwZSA9IGdldFR5cGUoa2V5KTtcblxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZGVsZXRlIHBhcmFtZXRlcnNba2V5XTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PSBcImFycmF5XCIgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgKHBhcmFtZXRlcnNba2V5XSBhcyBzdHJpbmdbXSkgPSBbdmFsdWVdO1xuXG4gICAgICAgIGlmICh0eXBlID09IFwiYXJyYXlcIiAmJiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAocGFyYW1ldGVyc1trZXldIGFzIHVua25vd24gYXMgbnVtYmVyW10pID0gW3ZhbHVlXTtcblxuICAgICAgICBpZiAodHlwZSA9PSBcImFycmF5XCIgJiYgdHlwZW9mIHZhbHVlID09PSBcImJpZ2ludFwiKVxuICAgICAgICAgICAgKHBhcmFtZXRlcnNba2V5XSBhcyB1bmtub3duIGFzIGJpZ2ludFtdKSA9IFt2YWx1ZV07XG5cbiAgICAgICAgaWYgKHR5cGUgPT0gXCJhcnJheVwiICYmICFBcnJheS5pc0FycmF5KHBhcmFtZXRlcnNba2V5XSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHBhcmFtZXRlciBcIiR7a2V5fVwiIG11c3QgYmUgYW4gYXJyYXlgLCB7XG4gICAgICAgICAgICAgICAgY2F1c2U6IGBvYXV0aDIgJHtmdW5jdGlvbk5hbWV9YCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgPT0gXCJqc29uXCIgJiYgIWlzSlNPTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHBhcmFtZXRlciBcIiR7a2V5fVwiIG11c3QgYmUgb2YgdHlwZSBKU09OYCwge1xuICAgICAgICAgICAgICAgIGNhdXNlOiBgb2F1dGgyICR7ZnVuY3Rpb25OYW1lfWAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGUgIT0gXCJhcnJheVwiICYmXG4gICAgICAgICAgICB0eXBlICE9IFwianNvblwiICYmXG4gICAgICAgICAgICB0eXBlICE9IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgIHR5cGUgIT0gdHlwZW9mIHZhbHVlXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGBUaGUgcGFyYW1ldGVyIFwiJHtrZXl9XCIgbXVzdCBiZSBvZiB0eXBlICR7dHlwZX1gLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2F1c2U6IGBvYXV0aDIgJHtmdW5jdGlvbk5hbWV9YCxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtZXRlcnNcbn1cbiJdfQ==