import { parameterNames } from "../domain";
const attributes = {
    // @ts-expect-error
    value: function (predicate) {
        const entries = Object.entries(this);
        return Object.fromEntries(entries.filter(value => predicate(value[0], value[1], this)));
    },
    enumerable: false, // this is actually the default
};
/**
 * Returns the parameters defined within the configuration object
 *   (standard and custom parameters) that are appropriate for
 *   the indicated method. Remove null or undefined
 *   values. Custom parameters overwrite standar parameters.
 *
 * @param method Method name
 * @param config Configuration object
 * @returns Object with the parameters for the method
 */
export const getParameters = (method, config) => {
    const parameters = config.parameters ?? {};
    const customParams = config[method] ?? {};
    const standardParms = getStandardParameters(method, parameters);
    const _parms = { ...standardParms, ...customParams };
    Object.defineProperty(_parms, "filter", attributes);
    const parms = _parms.filter((_, value) => value != null);
    return parms;
};
/**
 * Returns the parameters defined within the configuration object
 *   (standard parameters) that are appropriate for the indicated
 *   method. Removes null or undefined parameters.
 *
 * @param method Method name
 * @param parameters Standard configuration parameters
 * @returns Object with the standard parameters for the method
 */
const getStandardParameters = (method, parameters) => {
    const names = parameterNames[method];
    Object.defineProperty(parameters, "filter", attributes);
    // @ts-ignore
    const parms = parameters.filter(key => names.includes(key));
    return parms;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dldFBhcmFtZXRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtb2F1dGgyLW9pZGMvc3JjL2xpYi9fZ2V0UGFyYW1ldGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQTBFLGNBQWMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQVFuSCxNQUFNLFVBQVUsR0FBRztJQUNmLG1CQUFtQjtJQUNuQixLQUFLLEVBQUUsVUFDSCxTQUEyRDtRQUUzRCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FDckIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQy9ELENBQUM7SUFDTixDQUFDO0lBQ0QsVUFBVSxFQUFFLEtBQUssRUFBRSwrQkFBK0I7Q0FDckQsQ0FBQztBQUVGOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUN6QixNQUE0QixFQUM1QixNQUFxQixFQUNELEVBQUU7SUFDdEIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7SUFDM0MsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMxQyxNQUFNLGFBQWEsR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDaEUsTUFBTSxNQUFNLEdBQUcsRUFBRSxHQUFHLGFBQWEsRUFBRSxHQUFHLFlBQVksRUFBRSxDQUFDO0lBRXJELE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUVwRCxNQUFNLEtBQUssR0FBSSxNQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQVMsRUFBRSxLQUFjLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQztJQUd2RixPQUFPLEtBQTZCLENBQUM7QUFDekMsQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLHFCQUFxQixHQUFHLENBQzFCLE1BQW1DLEVBQ25DLFVBQTZCLEVBQy9CLEVBQUU7SUFDQSxNQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFckMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3hELGFBQWE7SUFDYixNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRTVELE9BQU8sS0FBMEIsQ0FBQztBQUN0QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJT0F1dGgyQ29uZmlnLCBJT0F1dGgyTWV0aG9kcywgSU9BdXRoMlBhcmFtZXRlcnMsIGN1c3RvbVBhcmFtZXRlcnNUeXBlLCBwYXJhbWV0ZXJOYW1lcyB9IGZyb20gXCIuLi9kb21haW5cIjtcblxuaW50ZXJmYWNlIElGaWx0ZXIge1xuICAgIGZpbHRlcihwcmVkaWNhdGU6IChrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgb2JqZWN0OiBvYmplY3QpID0+IGFueSk6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbiAgICB9O1xufVxuXG5jb25zdCBhdHRyaWJ1dGVzID0ge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICB2YWx1ZTogZnVuY3Rpb24gKFxuICAgICAgICBwcmVkaWNhdGU6IChrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgb2JqZWN0OiBvYmplY3QpID0+IGFueVxuICAgICkge1xuICAgICAgICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXModGhpcyk7XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgICAgICBlbnRyaWVzLmZpbHRlcih2YWx1ZSA9PiBwcmVkaWNhdGUodmFsdWVbMF0sIHZhbHVlWzFdLCB0aGlzKSlcbiAgICAgICAgKTtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLCAvLyB0aGlzIGlzIGFjdHVhbGx5IHRoZSBkZWZhdWx0XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmFtZXRlcnMgZGVmaW5lZCB3aXRoaW4gdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gKiAgIChzdGFuZGFyZCBhbmQgY3VzdG9tIHBhcmFtZXRlcnMpIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvclxuICogICB0aGUgaW5kaWNhdGVkIG1ldGhvZC4gUmVtb3ZlIG51bGwgb3IgdW5kZWZpbmVkXG4gKiAgIHZhbHVlcy4gQ3VzdG9tIHBhcmFtZXRlcnMgb3ZlcndyaXRlIHN0YW5kYXIgcGFyYW1ldGVycy5cbiAqXG4gKiBAcGFyYW0gbWV0aG9kIE1ldGhvZCBuYW1lXG4gKiBAcGFyYW0gY29uZmlnIENvbmZpZ3VyYXRpb24gb2JqZWN0XG4gKiBAcmV0dXJucyBPYmplY3Qgd2l0aCB0aGUgcGFyYW1ldGVycyBmb3IgdGhlIG1ldGhvZFxuICovXG5leHBvcnQgY29uc3QgZ2V0UGFyYW1ldGVycyA9IChcbiAgICBtZXRob2Q6IGtleW9mIElPQXV0aDJNZXRob2RzLFxuICAgIGNvbmZpZzogSU9BdXRoMkNvbmZpZ1xuKTogY3VzdG9tUGFyYW1ldGVyc1R5cGUgPT4ge1xuICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBjb25maWcucGFyYW1ldGVycyA/PyB7fTtcbiAgICBjb25zdCBjdXN0b21QYXJhbXMgPSBjb25maWdbbWV0aG9kXSA/PyB7fTtcbiAgICBjb25zdCBzdGFuZGFyZFBhcm1zID0gZ2V0U3RhbmRhcmRQYXJhbWV0ZXJzKG1ldGhvZCwgcGFyYW1ldGVycyk7XG4gICAgY29uc3QgX3Bhcm1zID0geyAuLi5zdGFuZGFyZFBhcm1zLCAuLi5jdXN0b21QYXJhbXMgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfcGFybXMsIFwiZmlsdGVyXCIsIGF0dHJpYnV0ZXMpO1xuXG4gICAgY29uc3QgcGFybXMgPSAoX3Bhcm1zIGFzIElGaWx0ZXIpLmZpbHRlcigoXzogc3RyaW5nLCB2YWx1ZTogdW5rbm93bikgPT4gdmFsdWUgIT0gbnVsbCk7XG5cblxuICAgIHJldHVybiBwYXJtcyBhcyBjdXN0b21QYXJhbWV0ZXJzVHlwZTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyYW1ldGVycyBkZWZpbmVkIHdpdGhpbiB0aGUgY29uZmlndXJhdGlvbiBvYmplY3RcbiAqICAgKHN0YW5kYXJkIHBhcmFtZXRlcnMpIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB0aGUgaW5kaWNhdGVkXG4gKiAgIG1ldGhvZC4gUmVtb3ZlcyBudWxsIG9yIHVuZGVmaW5lZCBwYXJhbWV0ZXJzLlxuICpcbiAqIEBwYXJhbSBtZXRob2QgTWV0aG9kIG5hbWVcbiAqIEBwYXJhbSBwYXJhbWV0ZXJzIFN0YW5kYXJkIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyc1xuICogQHJldHVybnMgT2JqZWN0IHdpdGggdGhlIHN0YW5kYXJkIHBhcmFtZXRlcnMgZm9yIHRoZSBtZXRob2RcbiAqL1xuY29uc3QgZ2V0U3RhbmRhcmRQYXJhbWV0ZXJzID0gKFxuICAgIG1ldGhvZDoga2V5b2YgdHlwZW9mIHBhcmFtZXRlck5hbWVzLFxuICAgIHBhcmFtZXRlcnM6IElPQXV0aDJQYXJhbWV0ZXJzXG4pID0+IHtcbiAgICBjb25zdCBuYW1lcyA9IHBhcmFtZXRlck5hbWVzW21ldGhvZF07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGFyYW1ldGVycywgXCJmaWx0ZXJcIiwgYXR0cmlidXRlcyk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHBhcm1zID0gcGFyYW1ldGVycy5maWx0ZXIoa2V5ID0+IG5hbWVzLmluY2x1ZGVzKGtleSkpO1xuXG4gICAgcmV0dXJuIHBhcm1zIGFzIElPQXV0aDJQYXJhbWV0ZXJzO1xufTtcbiJdfQ==