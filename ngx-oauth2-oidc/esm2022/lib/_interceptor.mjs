import { _recover_state } from "./_recoverState";
import { updateParameters } from "./_updateParameters";
export const _interceptor = async (config, // Parameter passed by reference and updated (oauth2Service.config)
idToken // Parameter passed by reference and updated (oauth2Service.idToken)
) => {
    await _recover_state(config, idToken);
    const search = decodeURIComponent(window.location.search);
    const hash = decodeURIComponent(window.location.hash);
    const str = hash.length ? hash : search;
    const substr = str.substring(1);
    const array = substr.length ? substr.split("&") : [];
    const entries = array.map(v => v.split("="));
    const params = Object.fromEntries(entries);
    const parmsState = config?.parameters?.state;
    window.history.replaceState({}, "", window.location.pathname);
    if (!entries.length)
        return Promise.resolve({});
    if (parmsState && parmsState !== params["state"])
        return Promise.reject(new Error(`Ilegal state received.`, {
            cause: "oauth2 interceptor",
        }));
    const newParams = updateParameters(params, config);
    if (newParams["error"])
        return Promise.reject(new Error(`${JSON.stringify(newParams, null, 4)}`, {
            cause: "oauth2 interceptor",
        }));
    return Promise.resolve(newParams);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2ludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW9hdXRoMi1vaWRjL3NyYy9saWIvX2ludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUM3QixNQUFxQixFQUFFLG1FQUFtRTtBQUMxRixPQUFtQixDQUFDLG9FQUFvRTtFQUMxRixFQUFFO0lBRUEsTUFBTSxjQUFjLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRXRDLE1BQU0sTUFBTSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUQsTUFBTSxJQUFJLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUN4QyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNyRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsTUFBTSxVQUFVLEdBQUcsTUFBTSxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUM7SUFFN0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTlELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTTtRQUFFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUF1QixDQUFDLENBQUM7SUFFckUsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDNUMsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUNqQixJQUFJLEtBQUssQ0FBQyx3QkFBd0IsRUFBRTtZQUNoQyxLQUFLLEVBQUUsb0JBQW9CO1NBQzlCLENBQUMsQ0FDTCxDQUFDO0lBRU4sTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRW5ELElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQztRQUNsQixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQ2pCLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDL0MsS0FBSyxFQUFFLG9CQUFvQjtTQUM5QixDQUFDLENBQ0wsQ0FBQztJQUVOLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJT0F1dGgyQ29uZmlnLCBJT0F1dGgyUGFyYW1ldGVycywganNvbk9iamVjdCB9IGZyb20gXCIuLi9kb21haW5cIjtcbmltcG9ydCB7IF9vYXV0aDJDb25maWdGYWN0b3J5IH0gZnJvbSBcIi4vX29hdXRoMkNvbmZpZ0ZhY3RvcnlcIjtcbmltcG9ydCB7IF9yZWNvdmVyX3N0YXRlIH0gZnJvbSBcIi4vX3JlY292ZXJTdGF0ZVwiO1xuaW1wb3J0IHsgdXBkYXRlUGFyYW1ldGVycyB9IGZyb20gXCIuL191cGRhdGVQYXJhbWV0ZXJzXCI7XG5cbmV4cG9ydCBjb25zdCBfaW50ZXJjZXB0b3IgPSBhc3luYyAoXG4gICAgY29uZmlnOiBJT0F1dGgyQ29uZmlnLCAvLyBQYXJhbWV0ZXIgcGFzc2VkIGJ5IHJlZmVyZW5jZSBhbmQgdXBkYXRlZCAob2F1dGgyU2VydmljZS5jb25maWcpXG4gICAgaWRUb2tlbjoganNvbk9iamVjdCAvLyBQYXJhbWV0ZXIgcGFzc2VkIGJ5IHJlZmVyZW5jZSBhbmQgdXBkYXRlZCAob2F1dGgyU2VydmljZS5pZFRva2VuKVxuKSA9PiB7XG5cbiAgICBhd2FpdCBfcmVjb3Zlcl9zdGF0ZShjb25maWcsIGlkVG9rZW4pO1xuXG4gICAgY29uc3Qgc2VhcmNoID0gZGVjb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgIGNvbnN0IGhhc2ggPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLmhhc2gpO1xuICAgIGNvbnN0IHN0ciA9IGhhc2gubGVuZ3RoID8gaGFzaCA6IHNlYXJjaDtcbiAgICBjb25zdCBzdWJzdHIgPSBzdHIuc3Vic3RyaW5nKDEpO1xuICAgIGNvbnN0IGFycmF5ID0gc3Vic3RyLmxlbmd0aCA/IHN1YnN0ci5zcGxpdChcIiZcIikgOiBbXTtcbiAgICBjb25zdCBlbnRyaWVzID0gYXJyYXkubWFwKHYgPT4gdi5zcGxpdChcIj1cIikpO1xuICAgIGNvbnN0IHBhcmFtcyA9IE9iamVjdC5mcm9tRW50cmllcyhlbnRyaWVzKTtcbiAgICBjb25zdCBwYXJtc1N0YXRlID0gY29uZmlnPy5wYXJhbWV0ZXJzPy5zdGF0ZTtcblxuICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgXCJcIiwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcblxuICAgIGlmICghZW50cmllcy5sZW5ndGgpIHJldHVybiBQcm9taXNlLnJlc29sdmUoe30gYXMgSU9BdXRoMlBhcmFtZXRlcnMpO1xuXG4gICAgaWYgKHBhcm1zU3RhdGUgJiYgcGFybXNTdGF0ZSAhPT0gcGFyYW1zW1wic3RhdGVcIl0pXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgICAgIG5ldyBFcnJvcihgSWxlZ2FsIHN0YXRlIHJlY2VpdmVkLmAsIHtcbiAgICAgICAgICAgICAgICBjYXVzZTogXCJvYXV0aDIgaW50ZXJjZXB0b3JcIixcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICBjb25zdCBuZXdQYXJhbXMgPSB1cGRhdGVQYXJhbWV0ZXJzKHBhcmFtcywgY29uZmlnKTtcblxuICAgIGlmIChuZXdQYXJhbXNbXCJlcnJvclwiXSlcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgICAgbmV3IEVycm9yKGAke0pTT04uc3RyaW5naWZ5KG5ld1BhcmFtcywgbnVsbCwgNCl9YCwge1xuICAgICAgICAgICAgICAgIGNhdXNlOiBcIm9hdXRoMiBpbnRlcmNlcHRvclwiLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3UGFyYW1zKTtcbn07XG4iXX0=