import { configSections, configurationOptions, metadataNames, } from "../domain";
import { isObject, toLowerCaseProperties } from "../utils";
import { _setParameters } from "./_setParameters";
/**
 * Processes an initial external configuration object (IOAuth2Config type) and
 *   converts it in the internal configuration object (oauth2Config type).
 *   Converts all undefined booleans to false. Removes all undefined fields. Trims
 *   all string values and removes empty fields. Converts all string[] to
 *   non-empty strings array.
 *
 * @param ioauth2Config The initial external configuration object
 * @returns The internal configuration object
 */
export const _oauth2ConfigFactory = (ioauth2Config = {}) => {
    if (!ioauth2Config || Object.entries(ioauth2Config).length == 0)
        return {};
    const cfg = {}; // Internal configuration object
    ioauth2Config = toLowerCaseProperties(ioauth2Config);
    // Configuration sections are objects and not unexpected
    for (const section in ioauth2Config) {
        const key = section;
        const value = ioauth2Config[key];
        if (!isObject(value))
            throw new Error(`Initial configuration section "${section}" is not an object.`, { cause: "oauth2 oauth2ConfigFactory" });
        if (!configSections.includes(section))
            throw new Error(`Unexpected initial configuration section "${section}".`, { cause: "oauth2 oauth2ConfigFactory" });
        cfg[key] = toLowerCaseProperties(value);
    }
    // Configuration options are not unexpected
    cfg.configuration ??= {};
    const confKeys = Object.keys(cfg.configuration);
    const confErrors = confKeys.filter(key => !configurationOptions.includes(key));
    if (confErrors.length)
        throw new Error(`Unexpected configuration options: ${confErrors.join(", ")}`, { cause: "oauth2 oauth2ConfigFactory" });
    cfg.parameters = _setParameters(cfg.parameters, "oauth2ConfigFactory");
    cfg.parameters.redirect_uri ??= window.location.href
        .split("#")[0]
        .split("?")[0];
    cfg.metadata ??= {};
    const metaKeys = Object.keys(cfg.metadata);
    const metaErrors = metaKeys.filter(name => !metadataNames.includes(name));
    if (metaErrors.length)
        console.error(`WARNING: Unexpected metadata fields ${metaErrors.join(", ")}.`, { cause: "oauth2 oauth2ConfigFactory" });
    return cfg;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX29hdXRoMkNvbmZpZ0ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtb2F1dGgyLW9pZGMvc3JjL2xpYi9fb2F1dGgyQ29uZmlnRmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUgsY0FBYyxFQUNkLG9CQUFvQixFQUVwQixhQUFhLEdBQ2hCLE1BQU0sV0FBVyxDQUFDO0FBQ25CLE9BQU8sRUFBRSxRQUFRLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDM0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsZ0JBQStCLEVBQUUsRUFBRSxFQUFFO0lBQ3RFLElBQUksQ0FBQyxhQUFhLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQztRQUMzRCxPQUFPLEVBQUUsQ0FBQztJQUVkLE1BQU0sR0FBRyxHQUFrQixFQUFFLENBQUMsQ0FBQyxnQ0FBZ0M7SUFFL0QsYUFBYSxHQUFHLHFCQUFxQixDQUFDLGFBQWEsQ0FBRSxDQUFDO0lBRXRELHdEQUF3RDtJQUV4RCxLQUFLLE1BQU0sT0FBTyxJQUFJLGFBQWEsRUFBRSxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLE9BQThCLENBQUM7UUFDM0MsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQ1gsa0NBQWtDLE9BQU8scUJBQXFCLEVBQzlELEVBQUUsS0FBSyxFQUFFLDRCQUE0QixFQUFFLENBQzFDLENBQUM7UUFFTixJQUFJLENBQUUsY0FBMkIsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1lBQy9DLE1BQU0sSUFBSSxLQUFLLENBQ1gsNkNBQTZDLE9BQU8sSUFBSSxFQUN4RCxFQUFFLEtBQUssRUFBRSw0QkFBNEIsRUFBRSxDQUMxQyxDQUFDO1FBRU4sR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLHFCQUFxQixDQUFNLEtBQUssQ0FBRSxDQUFDO0lBQ2xELENBQUM7SUFFRCwyQ0FBMkM7SUFFM0MsR0FBRyxDQUFDLGFBQWEsS0FBSyxFQUFFLENBQUM7SUFFekIsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDaEQsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FDOUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FDN0MsQ0FBQztJQUVGLElBQUksVUFBVSxDQUFDLE1BQU07UUFDakIsTUFBTSxJQUFJLEtBQUssQ0FDWCxxQ0FBcUMsVUFBVSxDQUFDLElBQUksQ0FDaEQsSUFBSSxDQUNQLEVBQUUsRUFDSCxFQUFFLEtBQUssRUFBRSw0QkFBNEIsRUFBRSxDQUMxQyxDQUFDO0lBRU4sR0FBRyxDQUFDLFVBQVUsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLFVBQWtDLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMvRixHQUFHLENBQUMsVUFBVSxDQUFDLFlBQVksS0FBSyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUk7U0FDL0MsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNiLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVuQixHQUFHLENBQUMsUUFBUSxLQUFLLEVBQUUsQ0FBQztJQUVwQixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMzQyxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFMUUsSUFBSSxVQUFVLENBQUMsTUFBTTtRQUNqQixPQUFPLENBQUMsS0FBSyxDQUNULHVDQUF1QyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQy9ELEVBQUUsS0FBSyxFQUFFLDRCQUE0QixFQUFFLENBQzFDLENBQUM7SUFFTixPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgSU9BdXRoMkNvbmZpZyxcbiAgICBjb25maWdTZWN0aW9ucyxcbiAgICBjb25maWd1cmF0aW9uT3B0aW9ucyxcbiAgICBjdXN0b21QYXJhbWV0ZXJzVHlwZSxcbiAgICBtZXRhZGF0YU5hbWVzLFxufSBmcm9tIFwiLi4vZG9tYWluXCI7XG5pbXBvcnQgeyBpc09iamVjdCwgdG9Mb3dlckNhc2VQcm9wZXJ0aWVzIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBfc2V0UGFyYW1ldGVycyB9IGZyb20gXCIuL19zZXRQYXJhbWV0ZXJzXCI7XG5cbi8qKlxuICogUHJvY2Vzc2VzIGFuIGluaXRpYWwgZXh0ZXJuYWwgY29uZmlndXJhdGlvbiBvYmplY3QgKElPQXV0aDJDb25maWcgdHlwZSkgYW5kXG4gKiAgIGNvbnZlcnRzIGl0IGluIHRoZSBpbnRlcm5hbCBjb25maWd1cmF0aW9uIG9iamVjdCAob2F1dGgyQ29uZmlnIHR5cGUpLlxuICogICBDb252ZXJ0cyBhbGwgdW5kZWZpbmVkIGJvb2xlYW5zIHRvIGZhbHNlLiBSZW1vdmVzIGFsbCB1bmRlZmluZWQgZmllbGRzLiBUcmltc1xuICogICBhbGwgc3RyaW5nIHZhbHVlcyBhbmQgcmVtb3ZlcyBlbXB0eSBmaWVsZHMuIENvbnZlcnRzIGFsbCBzdHJpbmdbXSB0b1xuICogICBub24tZW1wdHkgc3RyaW5ncyBhcnJheS5cbiAqXG4gKiBAcGFyYW0gaW9hdXRoMkNvbmZpZyBUaGUgaW5pdGlhbCBleHRlcm5hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICogQHJldHVybnMgVGhlIGludGVybmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gKi9cbmV4cG9ydCBjb25zdCBfb2F1dGgyQ29uZmlnRmFjdG9yeSA9IChpb2F1dGgyQ29uZmlnID0gPElPQXV0aDJDb25maWc+e30pID0+IHtcbiAgICBpZiAoIWlvYXV0aDJDb25maWcgfHwgT2JqZWN0LmVudHJpZXMoaW9hdXRoMkNvbmZpZykubGVuZ3RoID09IDApXG4gICAgICAgIHJldHVybiB7fTtcblxuICAgIGNvbnN0IGNmZyA9IDxJT0F1dGgyQ29uZmlnPnt9OyAvLyBJbnRlcm5hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuXG4gICAgaW9hdXRoMkNvbmZpZyA9IHRvTG93ZXJDYXNlUHJvcGVydGllcyhpb2F1dGgyQ29uZmlnKSE7XG5cbiAgICAvLyBDb25maWd1cmF0aW9uIHNlY3Rpb25zIGFyZSBvYmplY3RzIGFuZCBub3QgdW5leHBlY3RlZFxuXG4gICAgZm9yIChjb25zdCBzZWN0aW9uIGluIGlvYXV0aDJDb25maWcpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gc2VjdGlvbiBhcyBrZXlvZiBJT0F1dGgyQ29uZmlnO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGlvYXV0aDJDb25maWdba2V5XTtcblxuICAgICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBgSW5pdGlhbCBjb25maWd1cmF0aW9uIHNlY3Rpb24gXCIke3NlY3Rpb259XCIgaXMgbm90IGFuIG9iamVjdC5gLFxuICAgICAgICAgICAgICAgIHsgY2F1c2U6IFwib2F1dGgyIG9hdXRoMkNvbmZpZ0ZhY3RvcnlcIiB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgIGlmICghKGNvbmZpZ1NlY3Rpb25zIGFzIHN0cmluZ1tdKS5pbmNsdWRlcyhzZWN0aW9uKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5leHBlY3RlZCBpbml0aWFsIGNvbmZpZ3VyYXRpb24gc2VjdGlvbiBcIiR7c2VjdGlvbn1cIi5gLFxuICAgICAgICAgICAgICAgIHsgY2F1c2U6IFwib2F1dGgyIG9hdXRoMkNvbmZpZ0ZhY3RvcnlcIiB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgIGNmZ1trZXldID0gdG9Mb3dlckNhc2VQcm9wZXJ0aWVzPGFueT4odmFsdWUpITtcbiAgICB9XG5cbiAgICAvLyBDb25maWd1cmF0aW9uIG9wdGlvbnMgYXJlIG5vdCB1bmV4cGVjdGVkXG5cbiAgICBjZmcuY29uZmlndXJhdGlvbiA/Pz0ge307XG5cbiAgICBjb25zdCBjb25mS2V5cyA9IE9iamVjdC5rZXlzKGNmZy5jb25maWd1cmF0aW9uKTtcbiAgICBjb25zdCBjb25mRXJyb3JzID0gY29uZktleXMuZmlsdGVyKFxuICAgICAgICBrZXkgPT4gIWNvbmZpZ3VyYXRpb25PcHRpb25zLmluY2x1ZGVzKGtleSlcbiAgICApO1xuXG4gICAgaWYgKGNvbmZFcnJvcnMubGVuZ3RoKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgVW5leHBlY3RlZCBjb25maWd1cmF0aW9uIG9wdGlvbnM6ICR7Y29uZkVycm9ycy5qb2luKFxuICAgICAgICAgICAgICAgIFwiLCBcIlxuICAgICAgICAgICAgKX1gLFxuICAgICAgICAgICAgeyBjYXVzZTogXCJvYXV0aDIgb2F1dGgyQ29uZmlnRmFjdG9yeVwiIH1cbiAgICAgICAgKTtcblxuICAgIGNmZy5wYXJhbWV0ZXJzID0gX3NldFBhcmFtZXRlcnMoY2ZnLnBhcmFtZXRlcnMgYXMgY3VzdG9tUGFyYW1ldGVyc1R5cGUsIFwib2F1dGgyQ29uZmlnRmFjdG9yeVwiKTtcbiAgICBjZmcucGFyYW1ldGVycy5yZWRpcmVjdF91cmkgPz89IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgICAgIC5zcGxpdChcIiNcIilbMF1cbiAgICAgICAgLnNwbGl0KFwiP1wiKVswXTtcblxuICAgIGNmZy5tZXRhZGF0YSA/Pz0ge307XG5cbiAgICBjb25zdCBtZXRhS2V5cyA9IE9iamVjdC5rZXlzKGNmZy5tZXRhZGF0YSk7XG4gICAgY29uc3QgbWV0YUVycm9ycyA9IG1ldGFLZXlzLmZpbHRlcihuYW1lID0+ICFtZXRhZGF0YU5hbWVzLmluY2x1ZGVzKG5hbWUpKTtcblxuICAgIGlmIChtZXRhRXJyb3JzLmxlbmd0aClcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBXQVJOSU5HOiBVbmV4cGVjdGVkIG1ldGFkYXRhIGZpZWxkcyAke21ldGFFcnJvcnMuam9pbihcIiwgXCIpfS5gLFxuICAgICAgICAgICAgeyBjYXVzZTogXCJvYXV0aDIgb2F1dGgyQ29uZmlnRmFjdG9yeVwiIH1cbiAgICAgICAgKTtcblxuICAgIHJldHVybiBjZmc7XG59O1xuIl19