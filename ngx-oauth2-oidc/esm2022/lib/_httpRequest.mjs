import { catchError, lastValueFrom, map } from "rxjs";
import { updateParameters } from "./_updateParameters";
import { updateMetadata } from "./_updateMetadata";
/**
 * Gets an HttpClient get or post request response. If "areParameters" is true (default)
 *   the response is converted to IOAuth2Parameters and actualizes config.parameters.
 *   Otherwise, the response actualizes config.metadata.
 *
 * @param request HttpClient get or post method response. (Observable)
 * @param config Configuration object saved in memory. Passed by reference and
 *      updated
 * @param areParameters If true (default), the response is converted to IOAuth2Parameters
 *      and actualizes config.parameters. If false, the response actualizes config.metadata
 * @returns Promise with the request response (or error).
 */
export const httpRequest = (request, config, // Passed by reference and updated
areParameters = true) => lastValueFrom(request.pipe(map(res => areParameters
    ? updateParameters(res, config)
    : updateMetadata(res, config)), catchError(err => {
    throw err;
})));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2h0dHBSZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW9hdXRoMi1vaWRjL3NyYy9saWIvX2h0dHBSZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxVQUFVLEVBQUUsYUFBYSxFQUFFLEdBQUcsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUVqRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbkQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FDdkIsT0FBZ0MsRUFDaEMsTUFBcUIsRUFBRSxrQ0FBa0M7QUFDekQsYUFBYSxHQUFHLElBQUksRUFDd0IsRUFBRSxDQUM5QyxhQUFhLENBQ1IsT0FBbUMsQ0FBQyxJQUFJLENBQ3JDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUNOLGFBQWE7SUFDVCxDQUFDLENBQUMsZ0JBQWdCLENBQUMsR0FBb0IsRUFBRSxNQUFNLENBQUM7SUFDaEQsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFvQixFQUFFLE1BQU0sQ0FBQyxDQUNyRCxFQUNELFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUNiLE1BQU0sR0FBRyxDQUFDO0FBQ2QsQ0FBQyxDQUFDLENBQ0wsQ0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgY2F0Y2hFcnJvciwgbGFzdFZhbHVlRnJvbSwgbWFwfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgSU9BdXRoMkNvbmZpZywgSU9BdXRoMk1ldGFkYXRhLCBJT0F1dGgyUGFyYW1ldGVycywgcGF5bG9hZFR5cGUsIHN0cmluZ3NPYmplY3QgfSBmcm9tIFwiLi4vZG9tYWluXCI7XG5pbXBvcnQgeyB1cGRhdGVQYXJhbWV0ZXJzIH0gZnJvbSBcIi4vX3VwZGF0ZVBhcmFtZXRlcnNcIjtcbmltcG9ydCB7IHVwZGF0ZU1ldGFkYXRhIH0gZnJvbSBcIi4vX3VwZGF0ZU1ldGFkYXRhXCI7XG5cbi8qKlxuICogR2V0cyBhbiBIdHRwQ2xpZW50IGdldCBvciBwb3N0IHJlcXVlc3QgcmVzcG9uc2UuIElmIFwiYXJlUGFyYW1ldGVyc1wiIGlzIHRydWUgKGRlZmF1bHQpXG4gKiAgIHRoZSByZXNwb25zZSBpcyBjb252ZXJ0ZWQgdG8gSU9BdXRoMlBhcmFtZXRlcnMgYW5kIGFjdHVhbGl6ZXMgY29uZmlnLnBhcmFtZXRlcnMuXG4gKiAgIE90aGVyd2lzZSwgdGhlIHJlc3BvbnNlIGFjdHVhbGl6ZXMgY29uZmlnLm1ldGFkYXRhLlxuICpcbiAqIEBwYXJhbSByZXF1ZXN0IEh0dHBDbGllbnQgZ2V0IG9yIHBvc3QgbWV0aG9kIHJlc3BvbnNlLiAoT2JzZXJ2YWJsZSlcbiAqIEBwYXJhbSBjb25maWcgQ29uZmlndXJhdGlvbiBvYmplY3Qgc2F2ZWQgaW4gbWVtb3J5LiBQYXNzZWQgYnkgcmVmZXJlbmNlIGFuZFxuICogICAgICB1cGRhdGVkXG4gKiBAcGFyYW0gYXJlUGFyYW1ldGVycyBJZiB0cnVlIChkZWZhdWx0KSwgdGhlIHJlc3BvbnNlIGlzIGNvbnZlcnRlZCB0byBJT0F1dGgyUGFyYW1ldGVyc1xuICogICAgICBhbmQgYWN0dWFsaXplcyBjb25maWcucGFyYW1ldGVycy4gSWYgZmFsc2UsIHRoZSByZXNwb25zZSBhY3R1YWxpemVzIGNvbmZpZy5tZXRhZGF0YVxuICogQHJldHVybnMgUHJvbWlzZSB3aXRoIHRoZSByZXF1ZXN0IHJlc3BvbnNlIChvciBlcnJvcikuXG4gKi9cbmV4cG9ydCBjb25zdCBodHRwUmVxdWVzdCA9IChcbiAgICByZXF1ZXN0OiBPYnNlcnZhYmxlPHBheWxvYWRUeXBlPixcbiAgICBjb25maWc6IElPQXV0aDJDb25maWcsIC8vIFBhc3NlZCBieSByZWZlcmVuY2UgYW5kIHVwZGF0ZWRcbiAgICBhcmVQYXJhbWV0ZXJzID0gdHJ1ZVxuKTogUHJvbWlzZTxJT0F1dGgyUGFyYW1ldGVycyB8IElPQXV0aDJNZXRhZGF0YT4gPT5cbiAgICBsYXN0VmFsdWVGcm9tKFxuICAgICAgICAocmVxdWVzdCBhcyBPYnNlcnZhYmxlPHBheWxvYWRUeXBlPikucGlwZShcbiAgICAgICAgICAgIG1hcChyZXMgPT5cbiAgICAgICAgICAgICAgICBhcmVQYXJhbWV0ZXJzXG4gICAgICAgICAgICAgICAgICAgID8gdXBkYXRlUGFyYW1ldGVycyhyZXMgYXMgc3RyaW5nc09iamVjdCwgY29uZmlnKVxuICAgICAgICAgICAgICAgICAgICA6IHVwZGF0ZU1ldGFkYXRhKHJlcyBhcyBzdHJpbmdzT2JqZWN0LCBjb25maWcpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICApO1xuIl19