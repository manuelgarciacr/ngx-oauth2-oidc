/**
 * Returns a new URL form a base URL.
 *   Replaces the protocol if provided. Adds sufix if provided.
 *   Removes trailing slashes if removeTrailingSlash is true.
 *
 * @param base Initial URL
 * @param protocol New protocol
 * @param sufix URL sufix
 * @param removeTrailingSlash If true, removes trailing slashes
 * @returns New URL
 */
export const mountUrl = (base, protocol, sufix, removeTrailingSlash) => {
    let url = base;
    if (protocol) {
        const matches = url.match(/^.+:\/\//);
        const currentProtocol = matches ? matches[0].toLowerCase() : "";
        const newProtocol = `${protocol}://`.toLowerCase();
        if (currentProtocol && currentProtocol != newProtocol) {
            url = url.replace(currentProtocol, newProtocol);
        }
        if (!currentProtocol) {
            const error = () => url.startsWith(":") || url.startsWith("/");
            while (error())
                url = url.slice(1);
            url = `${newProtocol}${url}`;
        }
    }
    if (sufix) {
        const error = () => url.endsWith(":") || url.endsWith("/");
        while (error())
            url = url.slice(0, -1);
        url = `${url}/${sufix}`;
    }
    if (removeTrailingSlash) {
        const error = () => url.endsWith("/");
        while (error())
            url = url.slice(0, -1);
    }
    return url;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX21vdW50VXJsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW9hdXRoMi1vaWRjL3NyYy9saWIvX21vdW50VXJsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FDcEIsSUFBWSxFQUNaLFFBQWlCLEVBQ2pCLEtBQWMsRUFDZCxtQkFBNkIsRUFDL0IsRUFBRTtJQUNBLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQztJQUVmLElBQUksUUFBUSxFQUFFLENBQUM7UUFDWCxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDaEUsTUFBTSxXQUFXLEdBQUcsR0FBRyxRQUFRLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVuRCxJQUFJLGVBQWUsSUFBSSxlQUFlLElBQUksV0FBVyxFQUFFLENBQUM7WUFDcEQsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3BELENBQUM7UUFFRCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDbkIsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRS9ELE9BQU8sS0FBSyxFQUFFO2dCQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLEdBQUcsR0FBRyxHQUFHLFdBQVcsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNqQyxDQUFDO0lBQ0wsQ0FBQztJQUVELElBQUksS0FBSyxFQUFFLENBQUM7UUFDUixNQUFNLEtBQUssR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFM0QsT0FBTyxLQUFLLEVBQUU7WUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV2QyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUksbUJBQW1CLEVBQUUsQ0FBQztRQUN0QixNQUFNLEtBQUssR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXRDLE9BQU8sS0FBSyxFQUFFO1lBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXR1cm5zIGEgbmV3IFVSTCBmb3JtIGEgYmFzZSBVUkwuXG4gKiAgIFJlcGxhY2VzIHRoZSBwcm90b2NvbCBpZiBwcm92aWRlZC4gQWRkcyBzdWZpeCBpZiBwcm92aWRlZC5cbiAqICAgUmVtb3ZlcyB0cmFpbGluZyBzbGFzaGVzIGlmIHJlbW92ZVRyYWlsaW5nU2xhc2ggaXMgdHJ1ZS5cbiAqXG4gKiBAcGFyYW0gYmFzZSBJbml0aWFsIFVSTFxuICogQHBhcmFtIHByb3RvY29sIE5ldyBwcm90b2NvbFxuICogQHBhcmFtIHN1Zml4IFVSTCBzdWZpeFxuICogQHBhcmFtIHJlbW92ZVRyYWlsaW5nU2xhc2ggSWYgdHJ1ZSwgcmVtb3ZlcyB0cmFpbGluZyBzbGFzaGVzXG4gKiBAcmV0dXJucyBOZXcgVVJMXG4gKi9cbmV4cG9ydCBjb25zdCBtb3VudFVybCA9IChcbiAgICBiYXNlOiBzdHJpbmcsXG4gICAgcHJvdG9jb2w/OiBzdHJpbmcsXG4gICAgc3VmaXg/OiBzdHJpbmcsXG4gICAgcmVtb3ZlVHJhaWxpbmdTbGFzaD86IGJvb2xlYW5cbikgPT4ge1xuICAgIGxldCB1cmwgPSBiYXNlO1xuXG4gICAgaWYgKHByb3RvY29sKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSB1cmwubWF0Y2goL14uKzpcXC9cXC8vKTtcbiAgICAgICAgY29uc3QgY3VycmVudFByb3RvY29sID0gbWF0Y2hlcyA/IG1hdGNoZXNbMF0udG9Mb3dlckNhc2UoKSA6IFwiXCI7XG4gICAgICAgIGNvbnN0IG5ld1Byb3RvY29sID0gYCR7cHJvdG9jb2x9Oi8vYC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmIChjdXJyZW50UHJvdG9jb2wgJiYgY3VycmVudFByb3RvY29sICE9IG5ld1Byb3RvY29sKSB7XG4gICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShjdXJyZW50UHJvdG9jb2wsIG5ld1Byb3RvY29sKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY3VycmVudFByb3RvY29sKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHVybC5zdGFydHNXaXRoKFwiOlwiKSB8fCB1cmwuc3RhcnRzV2l0aChcIi9cIik7XG5cbiAgICAgICAgICAgIHdoaWxlIChlcnJvcigpKSB1cmwgPSB1cmwuc2xpY2UoMSk7XG4gICAgICAgICAgICB1cmwgPSBgJHtuZXdQcm90b2NvbH0ke3VybH1gO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1Zml4KSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4gdXJsLmVuZHNXaXRoKFwiOlwiKSB8fCB1cmwuZW5kc1dpdGgoXCIvXCIpO1xuXG4gICAgICAgIHdoaWxlIChlcnJvcigpKSB1cmwgPSB1cmwuc2xpY2UoMCwgLTEpO1xuXG4gICAgICAgIHVybCA9IGAke3VybH0vJHtzdWZpeH1gO1xuICAgIH1cblxuICAgIGlmIChyZW1vdmVUcmFpbGluZ1NsYXNoKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4gdXJsLmVuZHNXaXRoKFwiL1wiKTtcblxuICAgICAgICB3aGlsZSAoZXJyb3IoKSkgdXJsID0gdXJsLnNsaWNlKDAsIC0xKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXJsO1xufTtcbiJdfQ==