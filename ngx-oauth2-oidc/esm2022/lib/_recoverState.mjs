import { decrypt, getCookie, hexStringToArrayBuffer } from "../utils/encrypt";
import { _oauth2ConfigFactory } from "./_oauth2ConfigFactory";
import { setStore } from "./_store";
export const _recover_state = async (config, // Parameter passed by reference and updated (oauth2Service.config)
idToken // Parameter passed by reference and updated (oauth2Service.idToken)
) => {
    const cookieValue = getCookie("ngx_oauth2_oidc");
    const hexString = sessionStorage.getItem("oauth2_unload");
    sessionStorage.removeItem("oauth2_unload");
    document.cookie = "ngx_oauth2_oidc=; max-age=0";
    //  The configuration is only restored if it was previously saved and if the current
    //      configuration is empty
    if (!Object.entries(config).length &&
        cookieValue.length == 88 &&
        hexString?.length) {
        const keyValue = cookieValue.substring(0, 64);
        const ivValue = cookieValue.substring(64);
        const keyBuffer = hexStringToArrayBuffer(keyValue);
        const ivBuffer = hexStringToArrayBuffer(ivValue);
        const hexData = hexStringToArrayBuffer(hexString ?? "");
        const importedKey = await window.crypto.subtle.importKey("raw", keyBuffer, "AES-GCM", false, ["decrypt"]);
        const data = await decrypt(importedKey, ivBuffer, hexData);
        const parsed = JSON.parse(data);
        const newConfig = parsed.config ?? config ?? {};
        const newIdToken = parsed.idToken ?? idToken ?? {};
        Object.assign(config, _oauth2ConfigFactory(newConfig)); // Parameter passed by reference and updated
        Object.assign(idToken, newIdToken);
        const storage = config.configuration?.storage;
        setStore("config", storage ? config : null);
        setStore("idToken", storage ? idToken : null);
        setStore("test");
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3JlY292ZXJTdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1vYXV0aDItb2lkYy9zcmMvbGliL19yZWNvdmVyU3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM5RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQy9CLE1BQXFCLEVBQUUsbUVBQW1FO0FBQzFGLE9BQW1CLENBQUMsb0VBQW9FO0VBQzFGLEVBQUU7SUFDQSxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqRCxNQUFNLFNBQVMsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRTFELGNBQWMsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDM0MsUUFBUSxDQUFDLE1BQU0sR0FBRyw2QkFBNkIsQ0FBQztJQUVoRCxvRkFBb0Y7SUFDcEYsOEJBQThCO0lBQzlCLElBQ0ksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU07UUFDOUIsV0FBVyxDQUFDLE1BQU0sSUFBSSxFQUFFO1FBQ3hCLFNBQVMsRUFBRSxNQUFNLEVBQ25CLENBQUM7UUFDQyxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5QyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sU0FBUyxHQUFHLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sUUFBUSxHQUFHLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELE1BQU0sT0FBTyxHQUFHLHNCQUFzQixDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN4RCxNQUFNLFdBQVcsR0FBRyxNQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FDcEQsS0FBSyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsS0FBSyxFQUNMLENBQUMsU0FBUyxDQUFDLENBQ2QsQ0FBQztRQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sSUFBSSxFQUFFLENBQUM7UUFDaEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLE9BQU8sSUFBSSxPQUFPLElBQUksRUFBRSxDQUFDO1FBRW5ELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyw0Q0FBNEM7UUFDcEcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFbkMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUM7UUFFOUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JCLENBQUM7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJT0F1dGgyQ29uZmlnLCBqc29uT2JqZWN0IH0gZnJvbSBcIi4uL2RvbWFpblwiO1xuaW1wb3J0IHsgZGVjcnlwdCwgZ2V0Q29va2llLCBoZXhTdHJpbmdUb0FycmF5QnVmZmVyIH0gZnJvbSBcIi4uL3V0aWxzL2VuY3J5cHRcIjtcbmltcG9ydCB7IF9vYXV0aDJDb25maWdGYWN0b3J5IH0gZnJvbSBcIi4vX29hdXRoMkNvbmZpZ0ZhY3RvcnlcIjtcbmltcG9ydCB7IHNldFN0b3JlIH0gZnJvbSBcIi4vX3N0b3JlXCI7XG5cbmV4cG9ydCBjb25zdCBfcmVjb3Zlcl9zdGF0ZSA9IGFzeW5jIChcbiAgICBjb25maWc6IElPQXV0aDJDb25maWcsIC8vIFBhcmFtZXRlciBwYXNzZWQgYnkgcmVmZXJlbmNlIGFuZCB1cGRhdGVkIChvYXV0aDJTZXJ2aWNlLmNvbmZpZylcbiAgICBpZFRva2VuOiBqc29uT2JqZWN0IC8vIFBhcmFtZXRlciBwYXNzZWQgYnkgcmVmZXJlbmNlIGFuZCB1cGRhdGVkIChvYXV0aDJTZXJ2aWNlLmlkVG9rZW4pXG4pID0+IHtcbiAgICBjb25zdCBjb29raWVWYWx1ZSA9IGdldENvb2tpZShcIm5neF9vYXV0aDJfb2lkY1wiKTtcbiAgICBjb25zdCBoZXhTdHJpbmcgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwib2F1dGgyX3VubG9hZFwiKTtcblxuICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oXCJvYXV0aDJfdW5sb2FkXCIpO1xuICAgIGRvY3VtZW50LmNvb2tpZSA9IFwibmd4X29hdXRoMl9vaWRjPTsgbWF4LWFnZT0wXCI7XG5cbiAgICAvLyAgVGhlIGNvbmZpZ3VyYXRpb24gaXMgb25seSByZXN0b3JlZCBpZiBpdCB3YXMgcHJldmlvdXNseSBzYXZlZCBhbmQgaWYgdGhlIGN1cnJlbnRcbiAgICAvLyAgICAgIGNvbmZpZ3VyYXRpb24gaXMgZW1wdHlcbiAgICBpZiAoXG4gICAgICAgICFPYmplY3QuZW50cmllcyhjb25maWcpLmxlbmd0aCAmJlxuICAgICAgICBjb29raWVWYWx1ZS5sZW5ndGggPT0gODggJiZcbiAgICAgICAgaGV4U3RyaW5nPy5sZW5ndGhcbiAgICApIHtcbiAgICAgICAgY29uc3Qga2V5VmFsdWUgPSBjb29raWVWYWx1ZS5zdWJzdHJpbmcoMCwgNjQpO1xuICAgICAgICBjb25zdCBpdlZhbHVlID0gY29va2llVmFsdWUuc3Vic3RyaW5nKDY0KTtcbiAgICAgICAgY29uc3Qga2V5QnVmZmVyID0gaGV4U3RyaW5nVG9BcnJheUJ1ZmZlcihrZXlWYWx1ZSk7XG4gICAgICAgIGNvbnN0IGl2QnVmZmVyID0gaGV4U3RyaW5nVG9BcnJheUJ1ZmZlcihpdlZhbHVlKTtcbiAgICAgICAgY29uc3QgaGV4RGF0YSA9IGhleFN0cmluZ1RvQXJyYXlCdWZmZXIoaGV4U3RyaW5nID8/IFwiXCIpO1xuICAgICAgICBjb25zdCBpbXBvcnRlZEtleSA9IGF3YWl0IHdpbmRvdy5jcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICAgICAgICAgIFwicmF3XCIsXG4gICAgICAgICAgICBrZXlCdWZmZXIsXG4gICAgICAgICAgICBcIkFFUy1HQ01cIixcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgW1wiZGVjcnlwdFwiXVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZGVjcnlwdChpbXBvcnRlZEtleSwgaXZCdWZmZXIsIGhleERhdGEpO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICBjb25zdCBuZXdDb25maWcgPSBwYXJzZWQuY29uZmlnID8/IGNvbmZpZyA/PyB7fTtcbiAgICAgICAgY29uc3QgbmV3SWRUb2tlbiA9IHBhcnNlZC5pZFRva2VuID8/IGlkVG9rZW4gPz8ge307XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihjb25maWcsIF9vYXV0aDJDb25maWdGYWN0b3J5KG5ld0NvbmZpZykpOyAvLyBQYXJhbWV0ZXIgcGFzc2VkIGJ5IHJlZmVyZW5jZSBhbmQgdXBkYXRlZFxuICAgICAgICBPYmplY3QuYXNzaWduKGlkVG9rZW4sIG5ld0lkVG9rZW4pO1xuXG4gICAgICAgIGNvbnN0IHN0b3JhZ2UgPSBjb25maWcuY29uZmlndXJhdGlvbj8uc3RvcmFnZTtcblxuICAgICAgICBzZXRTdG9yZShcImNvbmZpZ1wiLCBzdG9yYWdlID8gY29uZmlnIDogbnVsbCk7XG4gICAgICAgIHNldFN0b3JlKFwiaWRUb2tlblwiLCBzdG9yYWdlID8gaWRUb2tlbiA6IG51bGwpO1xuICAgICAgICBzZXRTdG9yZShcInRlc3RcIik7XG4gICAgfVxufVxuIl19