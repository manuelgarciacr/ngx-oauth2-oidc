import { HttpHeaders, HttpParams } from "@angular/common/http";
import { catchError, lastValueFrom } from "rxjs";
import { setStore } from "./_store";
export const _api_request = async (request, config, customParameters = {}, url, method = "GET", jsonHeaders = {}, body = {}) => {
    const test = config.configuration?.test;
    const content_type = config.configuration?.content_type ??
        "application/x-www-form-urlencoded";
    const { access_token } = customParameters;
    const tokenHeader = access_token
        ? {
            Authorization: `Bearer ${access_token}`,
        }
        : undefined;
    jsonHeaders = { ...jsonHeaders };
    for (const key in jsonHeaders) {
        jsonHeaders[key] = JSON.stringify(jsonHeaders[key]).replace(/^"|"$/g, "");
    }
    const headersInit = {
        Accept: "application/json",
        "Content-Type": content_type,
        ...tokenHeader,
        ...jsonHeaders
    };
    const headers = new HttpHeaders(headersInit);
    setStore("test", test ? {} : null);
    if (!url) {
        const err = new Error(`missing endpoint.`, {
            cause: `oauth2 apiRequest`,
        });
        throw err;
    }
    const payload = {};
    // options to params
    for (const key in customParameters) {
        let v = customParameters[key]; // Option value
        Array.isArray(v) && (v = v.join(" ")); // String array to a string of space separated values.
        if (v || v === false)
            payload[key] = v.toString(); // If not nullish nor empty, added to params.
    }
    const params = new HttpParams({ fromObject: payload });
    // For testing purposes
    if (test) {
        const data = Object.keys(payload).length
            ? payload
            : { "@URL": url };
        setStore("test", data);
    }
    const req = method == "POST"
        ? request.post(url, body, {
            headers,
            params,
            observe: "body",
        })
        : request.get(url, {
            headers,
            params,
            observe: "body",
        });
    return lastValueFrom(req.pipe(catchError(err => {
        throw err;
    })));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2FwaVJlZ3Vlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtb2F1dGgyLW9pZGMvc3JjL2xpYi9fYXBpUmVndWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTNFLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFcEMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLEtBQUssRUFDN0IsT0FBbUIsRUFDbkIsTUFBcUIsRUFDckIsbUJBQXlDLEVBQUUsRUFDM0MsR0FBWSxFQUNaLFNBQXFCLEtBQUssRUFDMUIsY0FBMkIsRUFBRSxFQUM3QixPQUFvQixFQUFFLEVBQ1osRUFBRTtJQUNaLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDO0lBQ3hDLE1BQU0sWUFBWSxHQUNkLE1BQU0sQ0FBQyxhQUFhLEVBQUUsWUFBWTtRQUNsQyxtQ0FBbUMsQ0FBQztJQUN4QyxNQUFNLEVBQUMsWUFBWSxFQUFDLEdBQUcsZ0JBQWdCLENBQUM7SUFDeEMsTUFBTSxXQUFXLEdBQ2IsWUFBWTtRQUNSLENBQUMsQ0FBQztZQUNJLGFBQWEsRUFBRSxVQUFVLFlBQVksRUFBRTtTQUMxQztRQUNILENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDcEIsV0FBVyxHQUFHLEVBQUMsR0FBRyxXQUFXLEVBQUMsQ0FBQztJQUMvQixLQUFLLE1BQU0sR0FBRyxJQUFJLFdBQVcsRUFBRyxDQUFDO1FBQzdCLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDdkQsUUFBUSxFQUNSLEVBQUUsQ0FDTCxDQUFDO0lBQ04sQ0FBQztJQUNELE1BQU0sV0FBVyxHQUFHO1FBQ2hCLE1BQU0sRUFBRSxrQkFBa0I7UUFDMUIsY0FBYyxFQUFFLFlBQVk7UUFDNUIsR0FBRyxXQUFXO1FBQ2QsR0FBRyxXQUFXO0tBQ2pCLENBQUM7SUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUU3QyxRQUFRLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVuQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDUCxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtZQUN2QyxLQUFLLEVBQUUsbUJBQW1CO1NBQzdCLENBQUMsQ0FBQztRQUNILE1BQU0sR0FBRyxDQUFDO0lBQ2QsQ0FBQztJQUVELE1BQU0sT0FBTyxHQUFHLEVBQW1CLENBQUM7SUFFcEMsb0JBQW9CO0lBQ3BCLEtBQUssTUFBTSxHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsR0FBRyxnQkFBaUIsQ0FBQyxHQUFvQyxDQUFDLENBQUMsQ0FBQyxlQUFlO1FBQ2hGLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsc0RBQXNEO1FBQzdGLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLO1lBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLDZDQUE2QztJQUNwRyxDQUFDO0lBRUQsTUFBTSxNQUFNLEdBQUksSUFBSSxVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQTtJQUV0RCx1QkFBdUI7SUFDdkIsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNQLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTTtZQUNwQyxDQUFDLENBQUMsT0FBTztZQUNULENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUV0QixRQUFRLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxNQUFNLEdBQUcsR0FDTCxNQUFNLElBQUksTUFBTTtRQUNaLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUU7WUFDdkIsT0FBTztZQUNQLE1BQU07WUFDTixPQUFPLEVBQUUsTUFBTTtTQUNsQixDQUFDO1FBQ0osQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUksR0FBRyxFQUFFO1lBQ2hCLE9BQU87WUFDUCxNQUFNO1lBQ04sT0FBTyxFQUFFLE1BQU07U0FDbEIsQ0FBQyxDQUFDO0lBRWIsT0FBTyxhQUFhLENBQ2hCLEdBQUcsQ0FBQyxJQUFJLENBQ0osVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2IsTUFBTSxHQUFHLENBQUM7SUFDZCxDQUFDLENBQUMsQ0FDTCxDQUNKLENBQUM7QUFDTixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycywgSHR0cFBhcmFtcyB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuaW1wb3J0IHsgY3VzdG9tUGFyYW1ldGVyc1R5cGUsIElPQXV0aDJDb25maWcsIGpzb25PYmplY3QsIG1ldGhvZFR5cGUsIHBheWxvYWRUeXBlLCBzdHJpbmdzT2JqZWN0IH0gZnJvbSBcIi4uL2RvbWFpblwiO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbGFzdFZhbHVlRnJvbSB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBzZXRTdG9yZSB9IGZyb20gXCIuL19zdG9yZVwiO1xuXG5leHBvcnQgY29uc3QgX2FwaV9yZXF1ZXN0ID0gYXN5bmMgPFQ+KFxuICAgIHJlcXVlc3Q6IEh0dHBDbGllbnQsXG4gICAgY29uZmlnOiBJT0F1dGgyQ29uZmlnLFxuICAgIGN1c3RvbVBhcmFtZXRlcnMgPSA8Y3VzdG9tUGFyYW1ldGVyc1R5cGU+e30sXG4gICAgdXJsPzogc3RyaW5nLFxuICAgIG1ldGhvZDogbWV0aG9kVHlwZSA9IFwiR0VUXCIsXG4gICAganNvbkhlYWRlcnMgID0gPGpzb25PYmplY3Q+e30sXG4gICAgYm9keSA9IDxwYXlsb2FkVHlwZT57fVxuKTogUHJvbWlzZTxUPiA9PiB7XG4gICAgY29uc3QgdGVzdCA9IGNvbmZpZy5jb25maWd1cmF0aW9uPy50ZXN0O1xuICAgIGNvbnN0IGNvbnRlbnRfdHlwZSA9XG4gICAgICAgIGNvbmZpZy5jb25maWd1cmF0aW9uPy5jb250ZW50X3R5cGUgPz9cbiAgICAgICAgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbiAgICBjb25zdCB7YWNjZXNzX3Rva2VufSA9IGN1c3RvbVBhcmFtZXRlcnM7XG4gICAgY29uc3QgdG9rZW5IZWFkZXIgPVxuICAgICAgICBhY2Nlc3NfdG9rZW5cbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke2FjY2Vzc190b2tlbn1gLFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBqc29uSGVhZGVycyA9IHsuLi5qc29uSGVhZGVyc307XG4gICAgZm9yIChjb25zdCBrZXkgaW4ganNvbkhlYWRlcnMpICB7XG4gICAgICAgIGpzb25IZWFkZXJzW2tleV0gPSBKU09OLnN0cmluZ2lmeShqc29uSGVhZGVyc1trZXldKS5yZXBsYWNlKFxuICAgICAgICAgICAgL15cInxcIiQvZyxcbiAgICAgICAgICAgIFwiXCJcbiAgICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgaGVhZGVyc0luaXQgPSB7XG4gICAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IGNvbnRlbnRfdHlwZSxcbiAgICAgICAgLi4udG9rZW5IZWFkZXIsXG4gICAgICAgIC4uLmpzb25IZWFkZXJzXG4gICAgfTtcbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKGhlYWRlcnNJbml0KTtcblxuICAgIHNldFN0b3JlKFwidGVzdFwiLCB0ZXN0ID8ge30gOiBudWxsKTtcblxuICAgIGlmICghdXJsKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihgbWlzc2luZyBlbmRwb2ludC5gLCB7XG4gICAgICAgICAgICBjYXVzZTogYG9hdXRoMiBhcGlSZXF1ZXN0YCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge30gYXMgc3RyaW5nc09iamVjdDtcblxuICAgIC8vIG9wdGlvbnMgdG8gcGFyYW1zXG4gICAgZm9yIChjb25zdCBrZXkgaW4gY3VzdG9tUGFyYW1ldGVycykge1xuICAgICAgICBsZXQgdiA9IGN1c3RvbVBhcmFtZXRlcnMhW2tleSBhcyBrZXlvZiB0eXBlb2YgY3VzdG9tUGFyYW1ldGVyc107IC8vIE9wdGlvbiB2YWx1ZVxuICAgICAgICBBcnJheS5pc0FycmF5KHYpICYmICh2ID0gdi5qb2luKFwiIFwiKSk7IC8vIFN0cmluZyBhcnJheSB0byBhIHN0cmluZyBvZiBzcGFjZSBzZXBhcmF0ZWQgdmFsdWVzLlxuICAgICAgICBpZiAodiB8fCB2ID09PSBmYWxzZSkgcGF5bG9hZFtrZXldID0gdi50b1N0cmluZygpOyAvLyBJZiBub3QgbnVsbGlzaCBub3IgZW1wdHksIGFkZGVkIHRvIHBhcmFtcy5cbiAgICB9XG5cbiAgICBjb25zdCBwYXJhbXMgPSAgbmV3IEh0dHBQYXJhbXMoeyBmcm9tT2JqZWN0OiBwYXlsb2FkfSlcblxuICAgIC8vIEZvciB0ZXN0aW5nIHB1cnBvc2VzXG4gICAgaWYgKHRlc3QpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IE9iamVjdC5rZXlzKHBheWxvYWQpLmxlbmd0aFxuICAgICAgICAgICAgPyBwYXlsb2FkXG4gICAgICAgICAgICA6IHsgXCJAVVJMXCI6IHVybCB9O1xuXG4gICAgICAgIHNldFN0b3JlKFwidGVzdFwiLCBkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXEgPVxuICAgICAgICBtZXRob2QgPT0gXCJQT1NUXCJcbiAgICAgICAgICAgID8gcmVxdWVzdC5wb3N0PFQ+KHVybCwgYm9keSwge1xuICAgICAgICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICAgICAgICAgIG9ic2VydmU6IFwiYm9keVwiLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgOiByZXF1ZXN0LmdldDxUPih1cmwsIHtcbiAgICAgICAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICBvYnNlcnZlOiBcImJvZHlcIixcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICByZXR1cm4gbGFzdFZhbHVlRnJvbShcbiAgICAgICAgcmVxLnBpcGUoXG4gICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICk7XG59XG4iXX0=